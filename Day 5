You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Notice that you may not slant the container.




def maxArea(height):
    """
    Returns the maximum area of water that can be trapped between lines.

    Args:
    height (list): A list of integers representing line heights.

    Returns:
    int: The maximum area of water that can be trapped.
    """
    # Initialize two pointers, one at the start and one at the end
    left = 0
    right = len(height) - 1
    max_area = 0

    # Continue until the two pointers meet
    while left < right:
        # Calculate the area between the two lines
        h = min(height[left], height[right])
        w = right - left
        area = h * w
        
        # Update the maximum area if necessary
        max_area = max(max_area, area)
        
        # Move the pointer of the shorter line towards the other pointer
        if height[left] < height[right]:
            left += 1
        else:
            right -= 1
    
    return max_area
