You are given a 0-indexed 2D integer matrix grid of size n * n with values in the range [1, n2]. Each integer appears exactly once except a which appears twice and b which is missing. The task is to find the repeating and missing numbers a and b.

Return a 0-indexed integer array ans of size 2 where ans[0] equals to a and ans[1] equals to b.

 

Example 1:

Input: grid = [[1,3],[2,2]]
Output: [2,4]
Explanation: Number 2 is repeated and number 4 is missing so the answer is [2,4].
Example 2:

Input: grid = [[9,1,7],[8,9,2],[3,4,6]]
Output: [9,5]
Explanation: Number 9 is repeated and number 5 is missing so the answer is [9,5].



#include <iostream>
#include <vector>

using namespace std;

class DuplicateAndMissing {
public:
    vector<int> findDuplicateAndMissing(vector<vector<int>>& grid) {
        int n = grid.size();
        vector<int> frequency(n * n + 1, 0);
        int duplicate = 0, missing = 0;

        // Count occurrences
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                frequency[grid[i][j]]++;
            }
        }

        // Find duplicate and missing
        for (int i = 1; i <= n * n; i++) {
            if (frequency[i] == 0) {
                missing = i;
            } else if (frequency[i] > 1) {
                duplicate = i;
            }
        }

        return {duplicate, missing};
    }
};

int main() {
    DuplicateAndMissing solution;
    vector<vector<int>> grid = {{1, 3}, {2, 2}};
    vector<int> result = solution.findDuplicateAndMissing(grid);
    cout << "Duplicate: " << result[0] << endl;  // Output: 2
    cout << "Missing: " << result[1] << endl;    // Output: 4
    return 0;
}
